generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Roles {
    USER
    ADMIN
}

model User {
    id        Int       @id @default(autoincrement())
    uuid      String    @unique @default(uuid())
    firstName String
    lastName  String
    email     String    @unique
    password  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Session   Session[]
    role      Roles     @default(USER)
    Cart      Cart?
}

model Session {
    uuid       String   @id @default(uuid())
    userUUID   String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    isLoggedIn Boolean  @default(false)
    User       User?    @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
}

model Product {
    id          Int      @id @default(autoincrement())
    uuid        String   @unique @default(uuid())
    title       String
    description String
    price       String
    image       String
    category    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    CartItem CartItem[]
}

model Cart {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique @default(uuid())
    userCartUUID String   @unique
    userUUID     String?  @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    User     User?      @relation(fields: [userUUID], references: [uuid])
    CartItem CartItem[]
}

model CartItem {
    id          Int      @id @default(autoincrement())
    uuid        String   @unique @default(uuid())
    cartUUID    String
    productUUID String
    amount      Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Product Product? @relation(fields: [productUUID], references: [uuid])
    Cart    Cart?    @relation(fields: [cartUUID], references: [uuid])
}
