generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Roles {
    USER
    ADMIN
}

model User {
    id               Int                @id @default(autoincrement())
    uuid             String             @unique @default(uuid())
    firstName        String
    lastName         String
    email            String             @unique
    password         String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    Session          Session[]
    role             Roles              @default(USER)
    Cart             Cart[]
    OrderUserDetails OrderUserDetails[]
}

model Session {
    uuid       String   @id @default(uuid())
    userUUID   String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    isLoggedIn Boolean  @default(false)
    User       User?    @relation(fields: [userUUID], references: [uuid], onDelete: Cascade)
}

model Product {
    id          Int      @id @default(autoincrement())
    uuid        String   @unique @default(uuid())
    title       String
    description String
    altText     String   @default("")
    stock       Int      @default(0)
    price       String
    image       String
    category    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    CartItem  CartItem[]
    OrderItem OrderItem[]
}

model Order {
    id          Int         @id @default(autoincrement())
    uuid        String      @unique @default(uuid())
    userUUID    String?
    status      String
    totalAmount Decimal
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    OrderItem   OrderItem[]
    Receipt     Receipt?
    Payment     Payment[]
}

model OrderItem {
    id              Int      @id @default(autoincrement())
    orderUUID       String
    productUUID     String
    quantity        Int
    priceAtPurchase Decimal
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    Product Product @relation(fields: [productUUID], references: [uuid])
    Order   Order   @relation(fields: [orderUUID], references: [uuid])
}

model OrderUserDetails {
    id                    Int     @id @default(autoincrement())
    userUUID              String?
    orderUUID             String  @unique
    firstName             String
    lastName              String
    email                 String
    address               String
    postalServiceLocation String
    zipCode               String
    User                  User?   @relation(fields: [userUUID], references: [uuid])
}

model Receipt {
    id            Int      @id @default(autoincrement())
    orderUUID     String   @unique
    receiptNumber String   @unique
    issuedAt      DateTime
    taxAmount     Decimal
    currency      String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    Order Order @relation(fields: [orderUUID], references: [uuid])
}

model Payment {
    id            Int      @id @default(autoincrement())
    orderUUID     String
    paymentMethod String
    transactionId String?
    amount        Decimal
    status        String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    Order Order @relation(fields: [orderUUID], references: [uuid])
}

model ShippingAddress {
    id                    Int     @id @default(autoincrement())
    userUUID              String?
    orderUUID             String  @unique
    address               String
    postalServiceLocation String
    zipCode               String
}

model Cart {
    id           Int      @id @default(autoincrement())
    uuid         String   @unique @default(uuid())
    userCartUUID String   @unique
    userUUID     String?
    expiresAt    DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    User     User[]
    CartItem CartItem[]
}

model CartItem {
    id          Int      @id @default(autoincrement())
    uuid        String   @unique @default(uuid())
    cartUUID    String
    productUUID String
    amount      Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    Product Product? @relation(fields: [productUUID], references: [uuid])
    Cart    Cart?    @relation(fields: [cartUUID], references: [uuid])

    @@unique([cartUUID, productUUID])
}
